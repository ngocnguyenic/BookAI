package service;

import config.ConfigAPIKey;
import org.json.JSONArray;
import org.json.JSONObject;

import java.io.IOException;
import java.io.OutputStream;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.Scanner;
import javax.net.ssl.HttpsURLConnection;

public class GeminiService {

    private final String apiUrl = ConfigAPIKey.getProperty("gemini.base.url");
    private final String apiKey = ConfigAPIKey.getProperty("gemini.api.key");


public String generateChapterSummary(String chapterTitle, String chapterContent) throws IOException {
    String prompt = """
        T√≥m t·∫Øt ch∆∞∆°ng s√°ch ƒë·∫°i h·ªçc sau theo c·∫•u tr√∫c r√µ r√†ng:
        
        üìã FORMAT:
        
        T·ªîNG QUAN:
        [Gi·ªõi thi·ªáu chung 2-3 c√¢u v·ªÅ n·ªôi dung ch∆∞∆°ng]
        
        N·ªòI DUNG CH√çNH:
        ‚Ä¢ [ƒêi·ªÉm 1: Gi·∫£i th√≠ch chi ti·∫øt]
        ‚Ä¢ [ƒêi·ªÉm 2: Gi·∫£i th√≠ch chi ti·∫øt]
        ‚Ä¢ [ƒêi·ªÉm 3: Gi·∫£i th√≠ch chi ti·∫øt]
        ‚Ä¢ [ƒêi·ªÉm 4: Gi·∫£i th√≠ch chi ti·∫øt]
        
        KH√ÅI NI·ªÜM/THU·∫¨T NG·ªÆ QUAN TR·ªåNG:
        - [Thu·∫≠t ng·ªØ 1]: [ƒê·ªãnh nghƒ©a r√µ r√†ng]
        - [Thu·∫≠t ng·ªØ 2]: [ƒê·ªãnh nghƒ©a r√µ r√†ng]
        - [Thu·∫≠t ng·ªØ 3]: [ƒê·ªãnh nghƒ©a r√µ r√†ng]
        
        ·ª®NG D·ª§NG/V√ç D·ª§:
        [·ª®ng d·ª•ng th·ª±c t·∫ø ho·∫∑c v√≠ d·ª• minh h·ªça 2-3 c√¢u]
        
        ‚ö†Ô∏è QUY T·∫ÆC QUAN TR·ªåNG:
        1. GI·ªÆ NGUY√äN t·∫•t c·∫£ thu·∫≠t ng·ªØ chuy√™n m√¥n (ti·∫øng Anh, k√Ω hi·ªáu, c√¥ng th·ª©c)
        2. Gi·∫£i th√≠ch B·∫∞

NG TI·∫æNG VI·ªÜT r√µ r√†ng, d·ªÖ hi·ªÉu
        3. N·∫øu c√≥ c√¥ng th·ª©c/code/k√Ω hi·ªáu ‚Üí gi·ªØ nguy√™n format
        4. ƒê·ªô d√†i: 250-350 t·ª´
        5. D·ª±a 100% v√†o n·ªôi dung g·ªëc
        
        CH∆Ø∆†NG: """ + chapterTitle + """
        
        N·ªòI DUNG G·ªêC:
        """ + chapterContent + """
        
        T√ìM T·∫ÆT:
        """;
    
    return callGemini(prompt);
}
    public String generateQAPairs(String chapterTitle, String chapterContent) throws IOException {
        String prompt = """
            T·∫°o 3 c√¢u h·ªèi √¥n t·∫≠p v√† ƒë√°p √°n cho ch∆∞∆°ng n√†y.
            Tr·∫£ v·ªÅ JSON format: [{"question":"...","answer":"..."}]
            
            CH∆Ø∆†NG: """ + chapterTitle + """
            N·ªòI DUNG: """ + chapterContent;

        return callGemini(prompt);
    }

    public String detectChaptersWithAI(String fullBookText) throws IOException {
        String prompt = """
            Ph√¢n t√≠ch v√† chia s√°ch th√†nh c√°c ch∆∞∆°ng logic.
            
            QUY T·∫ÆC:
            1) B·ªè qua l·ªùi n√≥i ƒë·∫ßu, m·ª•c l·ª•c, ph·ª• l·ª•c
            2) M·ªói ch∆∞∆°ng c√≥: chapterNumber (int), title (ng·∫Øn g·ªçn), content (to√†n b·ªô)
            3) ∆Øu ti√™n c√°c ti√™u ƒë·ªÅ r√µ r√†ng trong s√°ch
            4) Merge c√°c ph·∫ßn nh·ªè th√†nh ch∆∞∆°ng l·ªõn h∆°n
            5) TR·∫¢ V·ªÄ JSON: {"chapters":[{"chapterNumber":1,"title":"...","content":"..."}]}
            
            N·ªòI DUNG S√ÅCH:
            """ + fullBookText;

        return callGemini(prompt);
    }

    private String callGemini(String prompt) throws IOException {
        String urlStr = apiUrl + "?key=" + apiKey;
        URL url = new URL(urlStr);
        HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();
        conn.setRequestMethod("POST");
        conn.setRequestProperty("Content-Type", "application/json; charset=UTF-8");
        conn.setDoOutput(true);

        String requestBody = "{\"contents\":[{\"parts\":[{\"text\":\"" + escapeJson(prompt) + "\"}]}]}";

        try (OutputStream os = conn.getOutputStream()) {
            os.write(requestBody.getBytes(StandardCharsets.UTF_8));
        }

        int code = conn.getResponseCode();
        StringBuilder response = new StringBuilder();
        
        try (Scanner scanner = new Scanner(
            code == 200 ? conn.getInputStream() : conn.getErrorStream(), 
            StandardCharsets.UTF_8)) {
            while (scanner.hasNextLine()) {
                response.append(scanner.nextLine());
            }
        }

        if (code != 200) {
            throw new IOException("Gemini API error: " + code + " - " + response);
        }

        return parseGeminiResponse(response.toString());
    }

    private String parseGeminiResponse(String json) {
        JSONObject root = new JSONObject(json);
        
        if (!root.has("candidates") || root.getJSONArray("candidates").isEmpty()) {
            return "";
        }

        JSONObject firstCandidate = root.getJSONArray("candidates").getJSONObject(0);
        JSONArray parts = firstCandidate.getJSONObject("content").getJSONArray("parts");

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < parts.length(); i++) {
            if (parts.getJSONObject(i).has("text")) {
                sb.append(parts.getJSONObject(i).getString("text")).append("\n");
            }
        }

        return sb.toString().trim();
    }

    private String escapeJson(String s) {
        if (s == null) return "";
        return s.replace("\\", "\\\\")
                .replace("\"", "\\\"")
                .replace("\n", "\\n")
                .replace("\r", "\\r")
                .replace("\t", "\\t");
    }
}