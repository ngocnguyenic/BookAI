package service;

import dao.ChapterDAO;
import model.Chapter;
import service.PineconeService.SearchResult;

import java.io.IOException;
import java.util.List;
import java.util.logging.Logger;
import java.util.stream.Collectors;

/**
 * Complete RAG (Retrieval-Augmented Generation) Service
 * K·∫øt h·ª£p vector search v·ªõi LLM generation
 */
public class RAGQueryService {
    
    private static final Logger logger = Logger.getLogger(RAGQueryService.class.getName());
    
    private final EmbeddingService embeddingService;
    private final PineconeService pineconeService;
    private final GeminiService geminiService;
    private final ChapterDAO chapterDAO;
    
    public RAGQueryService() {
        this.embeddingService = new EmbeddingService();
        this.pineconeService = new PineconeService();
        this.geminiService = new GeminiService();
        this.chapterDAO = new ChapterDAO();
    }
    
    /**
     * Main RAG Query Method
     * @param question C√¢u h·ªèi c·ªßa user
     * @param bookId (optional) Gi·ªõi h·∫°n search trong m·ªôt book c·ª• th·ªÉ
     * @param topK S·ªë l∆∞·ª£ng chapters li√™n quan c·∫ßn retrieve
     * @return Answer ƒë∆∞·ª£c generate t·ª´ relevant context
     */
    public RAGResponse query(String question, Integer bookId, int topK) throws IOException {
        logger.info("üîç RAG Query: " + question);
        
        // Step 1: Convert question th√†nh embedding vector
        logger.info("Step 1: Generating query embedding...");
        float[] queryEmbedding = embeddingService.generateEmbedding(question);
        
        // Step 2: Search Pinecone ƒë·ªÉ t√¨m relevant chapters
        logger.info("Step 2: Searching Pinecone for relevant chapters...");
        List<SearchResult> searchResults = pineconeService.queryTopK(queryEmbedding, topK, bookId);
        
        if (searchResults.isEmpty()) {
            return new RAGResponse(
                "Kh√¥ng t√¨m th·∫•y th√¥ng tin li√™n quan trong c∆° s·ªü d·ªØ li·ªáu.",
                null,
                0
            );
        }
        
        // Step 3: Fetch full content t·ª´ database
        logger.info("Step 3: Fetching full chapter content...");
        List<Chapter> relevantChapters = fetchFullChapters(searchResults);
        
        // Step 4: Build context t·ª´ relevant chapters
        logger.info("Step 4: Building context...");
        String context = buildContext(relevantChapters, searchResults);
        
        // Step 5: Generate answer using Gemini v·ªõi context
        logger.info("Step 5: Generating answer with LLM...");
        String answer = generateAnswerWithContext(question, context);
        
        // Step 6: Build response v·ªõi citations
        RAGResponse response = new RAGResponse(answer, relevantChapters, searchResults.size());
        response.searchResults = searchResults;
        
        logger.info("‚úÖ RAG Query completed successfully");
        return response;
    }
    
    /**
     * Fetch full chapter content t·ª´ database d·ª±a tr√™n search results
     */
    private List<Chapter> fetchFullChapters(List<SearchResult> searchResults) {
        return searchResults.stream()
            .map(result -> {
                try {
                    // Extract chapterID t·ª´ id (format: "chapter_123")
                    int chapterId = Integer.parseInt(result.id.replace("chapter_", ""));
                    return chapterDAO.getChapterById(chapterId);
                } catch (Exception e) {
                    logger.warning("Failed to fetch chapter: " + result.id);
                    return null;
                }
            })
            .filter(chapter -> chapter != null)
            .collect(Collectors.toList());
    }
    
    /**
     * Build context string t·ª´ relevant chapters
     */
    private String buildContext(List<Chapter> chapters, List<SearchResult> searchResults) {
        StringBuilder context = new StringBuilder();
        
        for (int i = 0; i < chapters.size(); i++) {
            Chapter chapter = chapters.get(i);
            SearchResult result = searchResults.get(i);
            
            context.append(String.format("\n=== NGU·ªíN %d (Similarity: %.3f) ===\n", i + 1, result.score));
            context.append(String.format("Ch∆∞∆°ng %d: %s\n", chapter.getChapterNumber(), chapter.getTitle()));
            
            if (chapter.getSummary() != null && !chapter.getSummary().isEmpty()) {
                context.append("T√≥m t·∫Øt: ").append(chapter.getSummary()).append("\n\n");
            }
            
            // L·∫•y 1500 chars ƒë·∫ßu c·ªßa content
            String content = chapter.getContent();
            if (content.length() > 1500) {
                content = content.substring(0, 1500) + "...";
            }
            context.append("N·ªôi dung: ").append(content).append("\n");
        }
        
        return context.toString();
    }
    
    /**
     * Generate answer s·ª≠ d·ª•ng LLM v·ªõi retrieved context
     */
    private String generateAnswerWithContext(String question, String context) throws IOException {
        String prompt = buildRAGPrompt(question, context);
        
        // S·ª≠ d·ª•ng detectChaptersWithAI v√¨ n√≥ c√≥ s·∫µn raw call
        // Ho·∫∑c c√≥ th·ªÉ t·∫°o method m·ªõi trong GeminiService
        String rawResponse = callGeminiForRAG(prompt);
        
        return rawResponse;
    }
    
    /**
     * Build prompt cho RAG
     */
    private String buildRAGPrompt(String question, String context) {
        return """
            B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh gi√∫p sinh vi√™n h·ªçc t·∫≠p.
            
            NHI·ªÜM V·ª§: Tr·∫£ l·ªùi c√¢u h·ªèi d·ª±a tr√™n NG·ªÆ C·∫¢NH ƒë∆∞·ª£c cung c·∫•p t·ª´ t√†i li·ªáu h·ªçc t·∫≠p.
            
            QUY T·∫ÆC QUAN TR·ªåNG:
            1. CH·ªà tr·∫£ l·ªùi d·ª±a tr√™n th√¥ng tin c√≥ trong NG·ªÆ C·∫¢NH
            2. N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin, n√≥i r√µ "Kh√¥ng t√¨m th·∫•y th√¥ng tin trong t√†i li·ªáu"
            3. Tr√≠ch d·∫´n ngu·ªìn khi tr·∫£ l·ªùi (v√≠ d·ª•: "Theo Ch∆∞∆°ng 2...")
            4. Tr·∫£ l·ªùi ng·∫Øn g·ªçn, s√∫c t√≠ch, d·ªÖ hi·ªÉu
            5. S·ª≠ d·ª•ng ti·∫øng Vi·ªát r√µ r√†ng
            
            NG·ªÆ C·∫¢NH:
            """ + context + """
            
            C√ÇU H·ªéI: """ + question + """
            
            TR·∫¢ L·ªúI (v·ªõi tr√≠ch d·∫´n ngu·ªìn):
            """;
    }
    
    /**
     * Call Gemini API tr·ª±c ti·∫øp cho RAG
     */
    private String callGeminiForRAG(String prompt) throws IOException {
        // Reuse existing GeminiService infrastructure
        // Trick: d√πng generateChapterSummary nh∆∞ng v·ªõi prompt custom
        return geminiService.generateChapterSummary("RAG Query", prompt);
    }
    
    /**
     * Response object ch·ª©a answer v√† metadata
     */
    public static class RAGResponse {
        public String answer;
        public List<Chapter> relevantChapters;
        public int totalRetrieved;
        public List<SearchResult> searchResults;
        
        public RAGResponse(String answer, List<Chapter> relevantChapters, int totalRetrieved) {
            this.answer = answer;
            this.relevantChapters = relevantChapters;
            this.totalRetrieved = totalRetrieved;
        }
        
        @Override
        public String toString() {
            return String.format("RAGResponse{answer_length=%d, relevant_chapters=%d}",
                answer.length(), relevantChapters != null ? relevantChapters.size() : 0);
        }
    }
}